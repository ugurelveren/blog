<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.Net on Ugur&#39;s Personal Documentation</title>
    <link>https://blog.ugurelveren.com/tags/.net/</link>
    <description>Recent content in .Net on Ugur&#39;s Personal Documentation</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Jun 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.ugurelveren.com/tags/.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dependency Injection</title>
      <link>https://blog.ugurelveren.com/post/dependency-injection/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.ugurelveren.com/post/dependency-injection/</guid>
      <description>&lt;p&gt;At my company, we hold a weekly “Lunch and Learn” event that I really like. It lets us share our experiences and expertise. Recently, during a chat with my colleagues, I got some basic questions about dependency injection (DI). This made me think that it would be a good idea to use one of these sessions to go over DI with the team. Also, I plan to write an article about dependency injection and its best practices. In the article, I&amp;rsquo;ll explain what DI is, how to use it effectively, and what the best practices are.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding .NET Dependency Injection Lifetimes</title>
      <link>https://blog.ugurelveren.com/post/understanding-net-dependency-injection-lifetimes/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.ugurelveren.com/post/understanding-net-dependency-injection-lifetimes/</guid>
      <description>&lt;p&gt;In the last article, we discussed how dependency injection (DI) helps keep our app&amp;rsquo;s parts separate, making them easier to handle and test. This time, I&amp;rsquo;ll focus on an important part of DI in .NET: lifetimes.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ll explain the different lifetimes in .NET: Transient, Scoped, and Singleton, and how to pick and use them for your app.&lt;/p&gt;&#xA;&lt;h2 id=&#34;understanding-di-lifetime-scopes&#34;&gt;Understanding DI Lifetime Scopes&lt;/h2&gt;&#xA;&lt;p&gt;Dependency injection (DI) lifetime scope refers to how long a dependency is used and stored in an application. Managing these lifetimes is important for efficient resource use, good performance, and clean code. DI frameworks offer several lifetime options for different needs and situations.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
