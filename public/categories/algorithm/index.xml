<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on Ugur&#39;s Personal Documentation</title>
    <link>https://blog.ugurelveren.com/categories/algorithm/</link>
    <description>Recent content in Algorithm on Ugur&#39;s Personal Documentation</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Feb 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.ugurelveren.com/categories/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Arrays: Prefix Sum Technique</title>
      <link>https://blog.ugurelveren.com/post/arrays-prefix-sum-technique/</link>
      <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.ugurelveren.com/post/arrays-prefix-sum-technique/</guid>
      <description>&lt;p&gt;Hello there! The prefix sum technique involves creating an array where the &lt;code&gt;prefix[i]&lt;/code&gt; is the sum of all elements up to index &lt;code&gt;i&lt;/code&gt;. This technique can also be referred to as the cumulative sum, inclusive scan, or simply scan.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;prefix[0] = nums[0]&#xA;prefix[1] = nums[0] + nums[1]&#xA;prefix[2] = nums[0] + nums[1] + nums[2]&#xA;prefix[i] = nums[0] + nums[1]+ nums[2] + .. + nums[i]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For example, if the original array is &lt;code&gt;[1, 2, 3, 4]&lt;/code&gt;, the prefix sum array would be &lt;code&gt;[1, 3, 6, 10]&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Arrays: Sliding Windows Technique</title>
      <link>https://blog.ugurelveren.com/post/arrays-sliding-windows-technique/</link>
      <pubDate>Thu, 16 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.ugurelveren.com/post/arrays-sliding-windows-technique/</guid>
      <description>&lt;p&gt;Window Sliding Technique is a strategy that aims to reduce nested loops for solving problems where you need to analyze a sequence of elements, like an array or a string. The technique reduces the use of a nested loop and replaces it with a single loop, reducing the time complexity.&lt;/p&gt;&#xA;&lt;p&gt;The sliding window technique is efficient because it avoids unnecessary computations. By moving the window only one step at a time, you avoid repeating calculations already done for the previous window. This can save a lot of time and make the algorithm more efficient.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Arrays: Two Pointer Technique</title>
      <link>https://blog.ugurelveren.com/post/arrays-two-pointer-technique/</link>
      <pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.ugurelveren.com/post/arrays-two-pointer-technique/</guid>
      <description>&lt;p&gt;The two-pointer technique is an easy method used to solve some array-related problems. It involves using two pointers, one starting from the beginning of the array and the other from the end, to traverse the array and find a solution. This technique is helpful because it reduces the time complexity of the algorithm and increases its efficiency.&lt;/p&gt;&#xA;&lt;p&gt;The two-pointer technique is used in various solutions such as finding the sum of two numbers in an array that equals a given target, finding the length of the longest subarray with a given sum, and finding the shortest subarray with a given sum. The basic idea behind this technique is to start from the two ends of the array and move the pointers towards each other until a solution is found or it becomes clear that a solution does not exist.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
