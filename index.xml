<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ugur's Personal Documentation</title><link>https://blog.ugurelveren.com/</link><description>Recent content on Ugur's Personal Documentation</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 18 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.ugurelveren.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Spotting and Fixing Monitoring Smells: A Guide to Reliable Systems</title><link>https://blog.ugurelveren.com/post/identifying-and-fixing-monitoring-smells-for-reliable-systems/</link><pubDate>Mon, 18 Nov 2024 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/post/identifying-and-fixing-monitoring-smells-for-reliable-systems/</guid><description>&lt;p>Keeping production systems healthy and reliable is a challenge. Are your services running without problem? During high-traffic periods, can your system handle the load without bottlenecks or failures? What about dependencies? Is everything working fine with third-party depencies or is there an outage on cloud service provider? These are everyday challenges for &lt;strong>DevOps&lt;/strong> and &lt;strong>SRE&lt;/strong> teams alike.&lt;/p>
&lt;p>Just like messy code gives clues about deeper issues (code smells), monitoring systems can have &lt;strong>&amp;ldquo;monitoring smells.&amp;rdquo;&lt;/strong> when something isn&amp;rsquo;t right. These are signs that your monitoring setup isn&amp;rsquo;t as good as it should be. While I won&amp;rsquo;t be diving into how to build the perfect monitoring system. This article will explain what these smells are, how to notice them, and how to fix them.&lt;/p></description></item><item><title>I Moved My Blog to GitHub Again</title><link>https://blog.ugurelveren.com/post/i-have-done-something/</link><pubDate>Sat, 14 Sep 2024 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/post/i-have-done-something/</guid><description>&lt;p>I&amp;rsquo;ve done something.&lt;/p>
&lt;p>Again.&lt;/p>
&lt;p>My cat is on my lap, I&amp;rsquo;m listening to music with my headset, and I&amp;rsquo;m writing a blog post about how I moved my blog to another platform. Well, not another platform, actually. I moved it to old friend GitHub again.&lt;/p>
&lt;p>This time, though, I developed something simple so I can manage my blog with my own solution.&lt;/p>
&lt;h2 id="starting-from-the-beginning">Starting From the Beginning&lt;/h2>
&lt;p>What was the previous platform I was using? I was using Write.as. It&amp;rsquo;s a simple platform where you can share your posts on the Fediverse. The UI is minimal, and the main goal of the CMS platform is clear: just write and share your articles.&lt;/p></description></item><item><title>Saga Design Pattern: Choreography and Orchestration</title><link>https://blog.ugurelveren.com/post/saga-design-pattern/</link><pubDate>Tue, 18 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/post/saga-design-pattern/</guid><description>&lt;p>In this article, I will discuss the Saga design pattern. First, we&amp;rsquo;ll address some technical challenges of creating ACID transactions. Then, we&amp;rsquo;ll explore the Saga design pattern and how to implement it.&lt;/p>
&lt;h2 id="database-per-service-pattern">Database Per Service Pattern&lt;/h2>
&lt;p>First, let&amp;rsquo;s talk about microservice architecture and the database per service pattern. Basically, each microservice in an application has its own dedicated database. This allows each microservice to manage its data independently, making it easier to develop, deploy, and scale each service without affecting the others. For instance, in an online store, the user service, order service, and inventory service each have their own databases. This isolation improves flexibility, as each service can choose the best database type for its needs and makes the system more resilient to failures.&lt;/p></description></item><item><title>Understanding .NET Dependency Injection Lifetimes</title><link>https://blog.ugurelveren.com/post/understanding-net-dependency-injection-lifetimes/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/post/understanding-net-dependency-injection-lifetimes/</guid><description>&lt;p>In the last article, we discussed how dependency injection (DI) helps keep our app&amp;rsquo;s parts separate, making them easier to handle and test. This time, I&amp;rsquo;ll focus on an important part of DI in .NET: lifetimes.&lt;/p>
&lt;p>I&amp;rsquo;ll explain the different lifetimes in .NET: Transient, Scoped, and Singleton, and how to pick and use them for your app.&lt;/p>
&lt;h2 id="understanding-di-lifetime-scopes">Understanding DI Lifetime Scopes&lt;/h2>
&lt;p>Dependency injection (DI) lifetime scope refers to how long a dependency is used and stored in an application. Managing these lifetimes is important for efficient resource use, good performance, and clean code. DI frameworks offer several lifetime options for different needs and situations.&lt;/p></description></item><item><title>Dependency Injection</title><link>https://blog.ugurelveren.com/post/dependency-injection/</link><pubDate>Tue, 04 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/post/dependency-injection/</guid><description>&lt;p>At my company, we hold a weekly “Lunch and Learn” event that I really like. It lets us share our experiences and expertise. Recently, during a chat with my colleagues, I got some basic questions about dependency injection (DI). This made me think that it would be a good idea to use one of these sessions to go over DI with the team. Also, I plan to write an article about dependency injection and its best practices. In the article, I&amp;rsquo;ll explain what DI is, how to use it effectively, and what the best practices are.&lt;/p></description></item><item><title>A Casual Exploration of Ingredient Awareness and Global Food Regulations</title><link>https://blog.ugurelveren.com/post/ingredient-awareness/</link><pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/post/ingredient-awareness/</guid><description>&lt;p>I often find my mind wandering to different topics, interrupting phone calls, meetings, or reading sessions. These thoughts take center stage, making it challenging to refocus on the original task.&lt;/p>
&lt;p>Interestingly, this mental game sometimes proves helpful. Whether it&amp;rsquo;s a forgotten task during a book or a work-related bug that surfaces while spending time with family, these moments can be both distracting and beneficial.&lt;/p>
&lt;p>A peculiar incident occurred last week when, despite my usual preference for organic food, I accidentally purchased non-organic sourdough bread. Initially trying to ignore it after enjoying a slice for breakfast, curiosity led me to search for its ingredients. The search took me down a rabbit hole of articles and comparisons between the European Union and the United States, accompanied by alarming posters like &amp;ldquo;Stop Eating Cancer.&amp;rdquo;&lt;/p></description></item><item><title>Cloud Design Patterns: Circuit Breaker Pattern</title><link>https://blog.ugurelveren.com/post/circuit-breaker-pattern/</link><pubDate>Wed, 29 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/post/circuit-breaker-pattern/</guid><description>&lt;p>The circuit breaker pattern stops a service from trying again to call another service when the previous attempts have failed multiple times. It&amp;rsquo;s similar to electrical circuit breakers that automatically cut off the current when there&amp;rsquo;s abnormal activity.&lt;/p>
&lt;p>In a distributed environment, calls to remote resources may fail due to reasons such as application exceptions, timeouts, authentication issues, or overloaded systems. Usually, resilient cloud applications automatically fix these issues over time, and the calling application manages these errors using a retry pattern.&lt;/p></description></item><item><title>Cloud Design Patterns</title><link>https://blog.ugurelveren.com/post/cloud-design-patterns/</link><pubDate>Fri, 24 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/post/cloud-design-patterns/</guid><description>&lt;p>The cloud is vast. Azure docs have around a hundred thousand pages, and AWS is just as big. Other cloud providers are out there too. Each gives you lots of apps, different rules, and dozens of integrations, so creating cloud-native ones has its challenges.&lt;/p>
&lt;p>They&amp;rsquo;re not identical, but big providers offer similar solutions. For example, Google Cloud Storage is like AWS S3 and Azure&amp;rsquo;s durable function is similar to AWS step functions. Details and rules can differ, but the main idea of the tech is similar, along with the challenges.&lt;/p></description></item><item><title>Battling Mosquitoes: A Personal Journey</title><link>https://blog.ugurelveren.com/post/battling-mosquitoes/</link><pubDate>Wed, 08 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/post/battling-mosquitoes/</guid><description>&lt;p>In late August, southern California faced a mosquito invasion. These tiny pests seemed to appear out of nowhere, leaving their itchy marks on unsuspecting victims. Whether you had a bug screen or not, they found their way into your home, and you&amp;rsquo;d wake up with irritating mosquito bites. At first, you might not notice them, but as time passed, the incessant itching would become undeniable.&lt;/p>
&lt;p>These mosquitoes were notorious for targeting ankles, leaving small, pink, and itchy bites. Sometimes, you&amp;rsquo;d wake up with not just one or two but possibly three or more bites. The constant itching would make you want to scratch your ankles, especially when walking. It was nearly impossible to scratch them all the time, like when driving, where you&amp;rsquo;d long for relief.&lt;/p></description></item><item><title>Goodbye HashNode, Welcome Writefreely</title><link>https://blog.ugurelveren.com/post/goodbye-hashnode-welcome-writefreely/</link><pubDate>Sun, 05 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/post/goodbye-hashnode-welcome-writefreely/</guid><description>&lt;p>Since the beginning of the pandemic, I&amp;rsquo;ve noticed a repetitive pattern of content on the internet across various platforms. Whether it&amp;rsquo;s on Reddit, different social media sites, or news websites and popular blogs, the same or similar content keeps circulating. Additionally, Google searches have taken a peculiar turn. When searching in English, the results often differ from the same websites, and in other languages like Turkish, you might encounter clickbait websites with strong SEO but weak content.&lt;/p></description></item><item><title>Azure Durable Functions</title><link>https://blog.ugurelveren.com/post/azure-durable-functions/</link><pubDate>Thu, 29 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/post/azure-durable-functions/</guid><description>&lt;h2 id="azure-functions-and-azure-durable-functions">Azure Functions and Azure Durable Functions&lt;/h2>
&lt;p>Microsoft Azure is a constantly expanding collection of cloud services. Among these services, Azure Functions and Azure Durable Functions are critical in enabling serverless computing. In this article, we will look at Azure Functions and Azure Durable Functions, distinguish between the two, and learn about the key concepts surrounding Azure Durable Functions.&lt;/p>
&lt;h3 id="what-is-an-azure-function">What is an Azure Function?&lt;/h3>
&lt;p>Azure Functions is a serverless computing service designed to effortlessly run small code snippets (functions) without any concern about the underlying infrastructure. This cloud-based solution empowers developers to focus solely on their code while leaving the infrastructure management worries behind.&lt;/p></description></item><item><title>Automating Script Execution with Systemd on Linux</title><link>https://blog.ugurelveren.com/post/automating-script-execution-systemd/</link><pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/post/automating-script-execution-systemd/</guid><description>&lt;p>In my previous blog post, I created a script that controls the fan speed on my Raspberry Pi. However, I encountered a problem – every time I restarted my Raspberry Pi, I had to manually run the script again, which was not ideal.&lt;/p>
&lt;p>In this blog post, I will demonstrate how to automate the execution of any script using Systemd. Systemd is a system and service manager for Linux operating systems.&lt;/p></description></item><item><title>How to control Raspberry Pi Fan</title><link>https://blog.ugurelveren.com/post/how-to-control-raspberry-pi-fan/</link><pubDate>Wed, 22 Mar 2023 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/post/how-to-control-raspberry-pi-fan/</guid><description>&lt;p>Last week, I did something unplanned: I bought a Raspberry Pi without any specific project in mind. I came across a Mastodon account (@rpilocator@mastodon.social) that helps people locate Raspberry Pis and I decided to get one. And now, here it is! I&amp;rsquo;m writing my first blog post about the Raspberry Pi Fan Control.&lt;/p>
&lt;p>Along with the Raspberry Pi, I purchased a case, some heatsinks, and a fan. My first blog post is about controlling the fan using your own software. I&amp;rsquo;ll be honest, I didn&amp;rsquo;t plan on developing anything at first but decided to give it a try.&lt;/p></description></item><item><title>Arrays: Prefix Sum Technique</title><link>https://blog.ugurelveren.com/post/arrays-prefix-sum-technique/</link><pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/post/arrays-prefix-sum-technique/</guid><description>&lt;p>Hello there! The prefix sum technique involves creating an array where the &lt;code>prefix[i]&lt;/code> is the sum of all elements up to index &lt;code>i&lt;/code>. This technique can also be referred to as the cumulative sum, inclusive scan, or simply scan.&lt;/p>
&lt;pre tabindex="0">&lt;code>prefix[0] = nums[0]
prefix[1] = nums[0] + nums[1]
prefix[2] = nums[0] + nums[1] + nums[2]
prefix[i] = nums[0] + nums[1]+ nums[2] + .. + nums[i]
&lt;/code>&lt;/pre>&lt;p>For example, if the original array is &lt;code>[1, 2, 3, 4]&lt;/code>, the prefix sum array would be &lt;code>[1, 3, 6, 10]&lt;/code>.&lt;/p></description></item><item><title>Arrays: Sliding Windows Technique</title><link>https://blog.ugurelveren.com/post/arrays-sliding-windows-technique/</link><pubDate>Thu, 16 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/post/arrays-sliding-windows-technique/</guid><description>&lt;p>Window Sliding Technique is a strategy that aims to reduce nested loops for solving problems where you need to analyze a sequence of elements, like an array or a string. The technique reduces the use of a nested loop and replaces it with a single loop, reducing the time complexity.&lt;/p>
&lt;p>The sliding window technique is efficient because it avoids unnecessary computations. By moving the window only one step at a time, you avoid repeating calculations already done for the previous window. This can save a lot of time and make the algorithm more efficient.&lt;/p></description></item><item><title>Arrays: Two Pointer Technique</title><link>https://blog.ugurelveren.com/post/arrays-two-pointer-technique/</link><pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/post/arrays-two-pointer-technique/</guid><description>&lt;p>The two-pointer technique is an easy method used to solve some array-related problems. It involves using two pointers, one starting from the beginning of the array and the other from the end, to traverse the array and find a solution. This technique is helpful because it reduces the time complexity of the algorithm and increases its efficiency.&lt;/p>
&lt;p>The two-pointer technique is used in various solutions such as finding the sum of two numbers in an array that equals a given target, finding the length of the longest subarray with a given sum, and finding the shortest subarray with a given sum. The basic idea behind this technique is to start from the two ends of the array and move the pointers towards each other until a solution is found or it becomes clear that a solution does not exist.&lt;/p></description></item><item><title>Books I've Been Reading</title><link>https://blog.ugurelveren.com/books/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/books/</guid><description>&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Book Title&lt;/th>
 &lt;th>Author&lt;/th>
 &lt;th>Genre&lt;/th>
 &lt;th>Start Date&lt;/th>
 &lt;th>End Date&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Why Buddhism is true : the science and philosophy of meditation and enlightenment&lt;/td>
 &lt;td>&lt;code>Robert Wright&lt;/code>&lt;/td>
 &lt;td>Non-fiction&lt;/td>
 &lt;td>2025-01-27&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>A Man Called Ove&lt;/td>
 &lt;td>&lt;code>Fredrik Backman&lt;/code>&lt;/td>
 &lt;td>Fiction&lt;/td>
 &lt;td>2025-01-20&lt;/td>
 &lt;td>2025-01-27&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Why We Sleep&lt;/td>
 &lt;td>&lt;code>Matthew Walker&lt;/code>&lt;/td>
 &lt;td>Non-fiction/Science&lt;/td>
 &lt;td>2025-01-02&lt;/td>
 &lt;td>2025-01-18&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>The Alchemist&lt;/td>
 &lt;td>&lt;code>Paulo Coelho&lt;/code>&lt;/td>
 &lt;td>Fiction/Philosophy&lt;/td>
 &lt;td>2024-12-28&lt;/td>
 &lt;td>2025-01-01&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Of Time and Turtles&lt;/td>
 &lt;td>&lt;code>Sy Montgomery&lt;/code>&lt;/td>
 &lt;td>Non-fiction&lt;/td>
 &lt;td>2024-12-13&lt;/td>
 &lt;td>2024-12-27&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>On Tyranny: Twenty Lessons from the Twentieth Century&lt;/td>
 &lt;td>&lt;code>Timothy Snyder&lt;/code>&lt;/td>
 &lt;td>Political Science&lt;/td>
 &lt;td>2024-12-03&lt;/td>
 &lt;td>2024-12-06&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Into the Wild&lt;/td>
 &lt;td>&lt;code>Jon Krakauer&lt;/code>&lt;/td>
 &lt;td>Adventure/Non-fiction&lt;/td>
 &lt;td>2024-11-20&lt;/td>
 &lt;td>2024-12-04&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Cannery Row&lt;/td>
 &lt;td>&lt;code>John Steinbeck&lt;/code>&lt;/td>
 &lt;td>Fiction&lt;/td>
 &lt;td>2024-11-01&lt;/td>
 &lt;td>2024-11-14&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>On Becoming Baby Wise: Giving Your Infant the Gift of Nighttime Sleep&lt;/td>
 &lt;td>&lt;code>Gary Ezzo and Robert Bucknam&lt;/code>&lt;/td>
 &lt;td>Parenting&lt;/td>
 &lt;td>2024-10-15&lt;/td>
 &lt;td>2024-10-31&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Why the North Star Stands Still and Other Indian Legends&lt;/td>
 &lt;td>&lt;code>William R. Palmer&lt;/code>&lt;/td>
 &lt;td>Folklore&lt;/td>
 &lt;td>2024-10-01&lt;/td>
 &lt;td>2024-10-14&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>The Sun Also Rises&lt;/td>
 &lt;td>&lt;code>Ernest Hemingway&lt;/code>&lt;/td>
 &lt;td>Fiction&lt;/td>
 &lt;td>2024-09-15&lt;/td>
 &lt;td>2024-09-30&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>The Power of Now: A Guide to Spiritual Enlightenment&lt;/td>
 &lt;td>&lt;code>Eckhart Tolle&lt;/code>&lt;/td>
 &lt;td>Self-help/Spirituality&lt;/td>
 &lt;td>2024-09-01&lt;/td>
 &lt;td>2024-09-14&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>The Tao of Pooh&lt;/td>
 &lt;td>&lt;code>Benjamin Hoff&lt;/code>&lt;/td>
 &lt;td>Philosophy&lt;/td>
 &lt;td>2024-08-15&lt;/td>
 &lt;td>2024-08-31&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>All Quiet on the Western Front&lt;/td>
 &lt;td>&lt;code>Erich Maria Remarque&lt;/code>&lt;/td>
 &lt;td>Historical Fiction&lt;/td>
 &lt;td>2024-08-01&lt;/td>
 &lt;td>2024-08-14&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Saving Capitalism: For the Many, Not the Few&lt;/td>
 &lt;td>&lt;code>Robert B. Reich&lt;/code>&lt;/td>
 &lt;td>Economics&lt;/td>
 &lt;td>2024-07-15&lt;/td>
 &lt;td>2024-07-31&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Bucket Lists</title><link>https://blog.ugurelveren.com/bucket-list/lists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/bucket-list/lists/</guid><description>&lt;p>I am a simple man trying to make my way in the universe, but life is often chaotic, and my thoughts feel scattered. To stay grounded, I use to-do lists to avoid forgetting important tasks. I have a to-do list for work, short-term activities, chores, and grocery shopping. These lists bring order to my days and help me stay focused. So, why not create a big to-do list for my entire life? Since this blog serves as my personal life documentation, it feels like the perfect place to house this lifelong to-do list.&lt;/p></description></item><item><title>Family Bucket List</title><link>https://blog.ugurelveren.com/bucket-list/family/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/bucket-list/family/</guid><description>&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;strong>#&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>Bucket List Item&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>Notes&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>Completed&lt;/strong>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>1&lt;/td>
 &lt;td>Establish a Weekly Movie Night&lt;/td>
 &lt;td>It can be a themed movie night if possible, and take a photo prior to the movie.&lt;/td>
 &lt;td>❌&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>2&lt;/td>
 &lt;td>Have a Multigenerational Holiday&lt;/td>
 &lt;td>The holiday destination can be Thessaloniki.&lt;/td>
 &lt;td>❌&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>3&lt;/td>
 &lt;td>Read &lt;em>Cannery Row&lt;/em> and Do a Small Cannery Row Road Trip in Monterey&lt;/td>
 &lt;td>If possible, visit Salinas (Steinbeck&amp;rsquo;s hometown) as well.&lt;/td>
 &lt;td>❌&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>4&lt;/td>
 &lt;td>Send an Actual Mail and Postcard to Extended Family Members Every Quarter of the Year&lt;/td>
 &lt;td>It can also work as a memory book for loved ones.&lt;/td>
 &lt;td>❌&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>5&lt;/td>
 &lt;td>Attend the Vienna Philharmonic New Year&amp;rsquo;s Concert&lt;/td>
 &lt;td>Plan ahead for tickets and possibly visit other Vienna landmarks while there.&lt;/td>
 &lt;td>❌&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Personal Growth Bucket List</title><link>https://blog.ugurelveren.com/bucket-list/personal-growth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/bucket-list/personal-growth/</guid><description>&lt;h2 id="learning-hub">Learning Hub&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;strong>Topic&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>Link&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>Type&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>Status&lt;/strong>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Go: Big Picture&lt;/td>
 &lt;td>&lt;a href="https://app.pluralsight.com/library/courses/big-picture-go">Pluralsight&lt;/a>&lt;/td>
 &lt;td>Course&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Go Fundamentals&lt;/td>
 &lt;td>&lt;a href="https://app.pluralsight.com/library/courses/fundamentals-go">Pluralsight&lt;/a>&lt;/td>
 &lt;td>Course&lt;/td>
 &lt;td>❌&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Designing Data-Intensive Applications&lt;/td>
 &lt;td>&lt;a href="https://www.oreilly.com/library/view/designing-data-intensive-applications/9781491903063/">O&amp;rsquo;Reilly&lt;/a>&lt;/td>
 &lt;td>Book&lt;/td>
 &lt;td>❌&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Creating Web Services with Go&lt;/td>
 &lt;td>&lt;a href="https://app.pluralsight.com/library/courses/creating-web-services-go">Pluralsight&lt;/a>&lt;/td>
 &lt;td>Course&lt;/td>
 &lt;td>❌&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="long-term-personal-growth-goals">Long-Term Personal Growth Goals&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;strong>Goal&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>Description&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>Status&lt;/strong>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Publish a Book&lt;/td>
 &lt;td>Write and self-publish a book on personal growth&lt;/td>
 &lt;td>❌&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Travel</title><link>https://blog.ugurelveren.com/bucket-list/travel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.ugurelveren.com/bucket-list/travel/</guid><description>&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;strong>#&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>Destination&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>Notes&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>Status&lt;/strong>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>1&lt;/td>
 &lt;td>Northern Lights, Norway&lt;/td>
 &lt;td>&lt;a href="https://www.openstreetmap.org/#map=7/69.6492/18.9560">OpenStreetMap&lt;/a>&lt;/td>
 &lt;td>❌&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>2&lt;/td>
 &lt;td>Grand Canyon, USA&lt;/td>
 &lt;td>&lt;a href="https://www.openstreetmap.org/#map=10/36.1069/-112.1129">OpenStreetMap&lt;/a>&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>3&lt;/td>
 &lt;td>Cappadocia, Turkey&lt;/td>
 &lt;td>&lt;a href="https://www.openstreetmap.org/#map=11/38.6431/34.8283">OpenStreetMap&lt;/a>&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>6&lt;/td>
 &lt;td>Kyoto, Japan&lt;/td>
 &lt;td>&lt;a href="https://www.openstreetmap.org/#map=12/35.0116/135.7681">OpenStreetMap&lt;/a>&lt;/td>
 &lt;td>❌&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>7&lt;/td>
 &lt;td>Route 66, USA&lt;/td>
 &lt;td>&lt;a href="https://www.openstreetmap.org/#map=6/35.4656/-99.3344">OpenStreetMap&lt;/a>&lt;/td>
 &lt;td>❌&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>11&lt;/td>
 &lt;td>Scotland&lt;/td>
 &lt;td>&lt;a href="https://www.openstreetmap.org/#map=6/56.4907/-4.2026">OpenStreetMap&lt;/a>&lt;/td>
 &lt;td>❌&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>15&lt;/td>
 &lt;td>Cannery Row, Monterey, USA&lt;/td>
 &lt;td>&lt;a href="https://www.openstreetmap.org/#map=16/36.6138/-121.8980">OpenStreetMap&lt;/a>&lt;/td>
 &lt;td>❌&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>16&lt;/td>
 &lt;td>Nice, France&lt;/td>
 &lt;td>&lt;a href="https://www.openstreetmap.org/#map=13/43.7102/7.2620">OpenStreetMap&lt;/a>&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>17&lt;/td>
 &lt;td>York, UK&lt;/td>
 &lt;td>&lt;a href="https://www.openstreetmap.org/#map=14/53.9590/-1.0815">OpenStreetMap&lt;/a>&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item></channel></rss>